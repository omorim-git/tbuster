#!/bin/bash

set -e

# vars
logfile=$basedir/setup_log.md

export TZ=JST-9

#--------------------------------------
# postgresql

# PostgreSQLのインストール
postgres_install() {
  version=$1
  cmd="sudo apt-get install -y postgresql-$version"
  exec_command "$cmd" || return $?
}

# PostgreSQLデータベースの初期化
postgres_initdb() {
  version=$1
  cmd="sudo -u postgres "postgresql-setup --initdb --unit postgresql""
  cmd="PGDATA=/var/lib/postgresql/$(psql -V | awk '{print $3}' | cut -d'.' -f1,2)/main"
  exec_command "$cmd" || return $?
  cmd="sudo -u postgres rm -rf $PGDATA/*"
  exec_command "$cmd" || return $?
  cmd="sudo -u postgres /usr/lib/postgresql/$(psql -V | awk '{print $3}' | cut -d'.' -f1,2)/bin/initdb -D $PGDATA"
}

# PostgreSQLサービスの起動と有効化
postgres_enable_service() {
  cmd="sudo service postgresql start"
  exec_command "$cmd" || return $?
  cmd="sudo update-rc.d postgresql enable"
  exec_command "$cmd" || return $?
}

postgres_start() {
  cmd="sudo service postgresql start"
  exec_command "$cmd" || return $?
}

# PostgreSQLユーザーのパスワード設定
postgres_set_password() {
  user=$1
  pass=$2
  cmd="sudo -u postgres psql -c \"ALTER USER $user WITH PASSWORD '$pass';\""
  exec_command "$cmd" || return $?
}

# 新しいデータベースの作成
postgres_create_db() {
  db=$1
  check_cmd="sudo -u postgres psql -c \"SELECT datname FROM pg_database WHERE datname = '$db';\" | grep -q '0 rows'"
  cmd="sudo -u postgres psql -c \"CREATE DATABASE $db;\""
  ! exec_command "$check_cmd" || exec_command "$cmd" || return $?
}

# PostgreSQLの設定編集
postgres_configure() {
  version=$1
  sed_cmd="sudo sed -i \"s/^#listen_addresses = 'localhost'/listen_addresses = '*'/\" /etc/postgresql/$version/main/postgresql.conf"
  exec_command "$sed_cmd" || return $?
  sed_cmd="sudo sed -i \"s/^max_connections = [0-9]\+/max_connections = 4/\" /etc/postgresql/$version/main/postgresql.conf"
  exec_command "$sed_cmd" || return $?
  hba_check_cmd="sudo grep -E '^host\s+all\s+all\s+0\.0\.0\.0/0\s+md5' /etc/postgresql/$version/main/pg_hba.conf"
  hba_cmd="echo \"host all all 0.0.0.0/0 md5\" | sudo tee -a /etc/postgresql/$version/main/pg_hba.conf"
  exec_command "$hba_check_cmd" || exec_command "$hba_cmd" || return $?
}

# PostgreSQLサービスの再起動
postgres_restart_service() {
  version=$1
  cmd="sudo service postgresql restart"
  exec_command "$cmd" || return $?
}

# data.csvの作成
create_data() {
  file=$1
  echo -n > $file
  for i in {a..z}; do
    for j in {a..z}; do
      row="${i}${j}"
      columns=""
      for k in $(seq -w 1 100); do
        columns+="${row}_column${k},"
      done
      columns=${columns%,}  # 最後のカンマを削除
      echo "${row},${columns}" >> $file
    done
  done
}

# テーブルへのデータのインポート
postgres_import_data() {
  db=$1
  table=$2
  dir=$3
  file=$4
  create_data data.csv || return $?
  check_cmd="sudo -u postgres psql -d $db -c \"SELECT * FROM pg_catalog.pg_tables WHERE tablename =  '$table';\" | grep -q '0 row'"
  cmd="sudo -u postgres psql -d $db -c \"DROP TABLE $table;\""
  exec_command "$check_cmd" || exec_command "$cmd" || return $?
  cmd="sudo -u postgres psql -d $db -c \"CREATE TABLE $table (key TEXT PRIMARY KEY,text001 TEXT,text002 TEXT,text003 TEXT,text004 TEXT,text005 TEXT,text006 TEXT,text007 TEXT,text008 TEXT,text009 TEXT,text010 TEXT,text011 TEXT,text012 TEXT,text013 TEXT,text014 TEXT,text015 TEXT,text016 TEXT,text017 TEXT,text018 TEXT,text019 TEXT,text020 TEXT,text021 TEXT,text022 TEXT,text023 TEXT,text024 TEXT,text025 TEXT,text026 TEXT,text027 TEXT,text028 TEXT,text029 TEXT,text030 TEXT,text031 TEXT,text032 TEXT,text033 TEXT,text034 TEXT,text035 TEXT,text036 TEXT,text037 TEXT,text038 TEXT,text039 TEXT,text040 TEXT,text041 TEXT,text042 TEXT,text043 TEXT,text044 TEXT,text045 TEXT,text046 TEXT,text047 TEXT,text048 TEXT,text049 TEXT,text050 TEXT,text051 TEXT,text052 TEXT,text053 TEXT,text054 TEXT,text055 TEXT,text056 TEXT,text057 TEXT,text058 TEXT,text059 TEXT,text060 TEXT,text061 TEXT,text062 TEXT,text063 TEXT,text064 TEXT,text065 TEXT,text066 TEXT,text067 TEXT,text068 TEXT,text069 TEXT,text070 TEXT,text071 TEXT,text072 TEXT,text073 TEXT,text074 TEXT,text075 TEXT,text076 TEXT,text077 TEXT,text078 TEXT,text079 TEXT,text080 TEXT,text081 TEXT,text082 TEXT,text083 TEXT,text084 TEXT,text085 TEXT,text086 TEXT,text087 TEXT,text088 TEXT,text089 TEXT,text090 TEXT,text091 TEXT,text092 TEXT,text093 TEXT,text094 TEXT,text095 TEXT,text096 TEXT,text097 TEXT,text098 TEXT,text099 TEXT,text100 TEXT);\""
  exec_command "$cmd" || return $?
  cmd="chmod 777 $dir | chmod 777 $dir/$file"
  exec_command "$cmd" || return $?
  cmd="cd $dir"
  exec_command "$cmd" || return $?
  cmd="sudo -u postgres psql -d $db -c \"\COPY $table FROM '$file' DELIMITER ',' CSV;\""
  exec_command "$cmd" || return $?
  cmd="cd .."
  exec_command "$cmd" || return $?
}

#--------------------------------------
# nfs

# 未フォーマットのディスクを見つける
disk_find_unformatted() {
  for disk in $(lsblk -nd --output NAME); do
    # ディスクのUUIDをチェック。UUIDがない場合は未フォーマット
    if [ -z "$(sudo blkid | grep /dev/$disk)" ]; then
      echo "$disk"
      return
    fi
  done
}

# ディスクをフォーマットしマウント
disk_format_and_mount() {
  device=$1
  mount_point=$2
  fs_type=$3
  options=$4

  # 未フォーマットのディスクに対してフォーマットを実行
  if [ -z "$(sudo blkid /dev/$device)" ]; then
    cmd="sudo mkfs.$fs_type -i maxpct=1 /dev/$device"
    exec_command "$cmd" || return $?
    cmd="sudo mkdir -p $mount_point"
    exec_command "$cmd" || return $?
    cmd="sudo mount -t $fs_type /dev/$device $mount_point"
    exec_command "$cmd" || return $?
    cmd="echo \"/dev/$device $mount_point $fs_type $options 0 0\" | sudo tee -a /etc/fstab"
    exec_command "$cmd" || return $?
  fi
}

# nfsのインストールチェック
nfs_check_install() {
  cmd="apt-get list installed | grep nfs-common"
  exec_command "$cmd" || return $?
}

# nfsのインストール
nfs_install() {
  if ! nfs_check_install; then
    cmd="sudo apt-get install -y nfs-common"
    exec_command "$cmd" || return $?
  fi
}

# nfsサービスの起動と有効化
nfs_enable_service() {
  cmd="sudo service nfs-kernel-server start"
  exec_command "$cmd" || return $?
  cmd="sudo update-rc.d nfs-kernel-server enable"
  exec_command "$cmd" || return $?
}

# nfsディレクトリの公開確認
nfs_check_export() {
  directory=$1
  cmd="grep $directory /etc/exports"
  exec_command "$cmd" || return $?
}

# nfsディレクトリの作成と公開
nfs_add_export() {
  directory=$1
  options=$2
  cmd="sudo mkdir -p $directory"
  exec_command "$cmd" || return $?
  cmd="sudo chmod 777 $directory"
  exec_command "$cmd" || return $?
  check_cmd="grep $directory /etc/exports"
  cmd="echo \"$directory $options\" | sudo tee -a /etc/exports"
  exec_command "$check_cmd" || exec_command "$cmd" || return $?
  cmd="sudo exportfs -ar"
  exec_command "$cmd" || return $?
}

#--------------------------------------
# batch

mount_nfs() {
  server_ip=$1
  directory=$2
  mount_point=$3
  fs_type=$4
  options=$5
  cmd="sudo mkdir -p $mount_point"
  exec_command "$cmd" || return $?
  check_cmd="grep nfs /etc/fstab"
  cmd="echo \"$server_ip:$directory $mount_point $fs_type $options 0 0\" | sudo tee -a /etc/fstab"
  exec_command "$check_cmd" || exec_command "$cmd" || return $?
  cmd="sudo mount -a"
  exec_command "$cmd" || return $?
}

postgres_client_install() {
  version=$1
  cmd="sudo apt-get install -y postgresql$version"
  exec_command "$cmd" || return $?
}

create_dummy_files() {
  dir=$1
  required_files=$2
  cmd="mkdir -p $dir"
  exec_command "$cmd" || return $?
  if [ "$required_files" -gt 0 ]; then
    for ((i=0; i<required_files; i++)); do
        dummy_file=$(printf "$dir/dummyfile.%06d" $i)
        echo "This is a dummy file." > $dummy_file || return $?
    done
  fi
}

#--------------------------------------
# misc
enable_sudo() {
  current_user=$(whoami)
  cmd="echo \"$current_user ALL=(ALL) NOPASSWD: ALL\" | sudo tee -a /etc/sudoers > /dev/null"
  if ! sudo grep -q -F "$current_user" /etc/sudoers; then
    exec_command "$cmd" || return $?
  fi
}

check_cli() {
  cmd="which $1"
  exec_command "$cmd" || return $?
}

#--------------------------------------
# command
exec_command() {
  status=0
  expect_regex=$2
  command_log_start "$1"
  if [ -z $expect_regex ]; then
    eval " $1" >>$logfile 2>&1 || status=$?
  else
    output=$(eval " $1" 2>&1)
    echo $output >>$logfile
    [[ "$output" =~ $expect_regex ]] || status=$?
  fi
  command_log_end "$1"
  return $status
}
exec_background_command() {
  out=${2:-/dev/null}
  command_log_start "$1"
  eval " $1" >>$out 2>&1 &
  command_log_end "$1"
}
exec_command_out() {
  command_log_start "$1"
  output=$(eval " $1" 2>&1)
  echo $output | tee -a $logfile
  command_log_end "$1"
}

#--------------------------------------
# logging
command_log_start() {
  echo "\`$(now)\`" >>$logfile
  echo '```bash' >>$logfile
  echo "$1" >>$logfile
  echo '```' >>$logfile
  echo '```terminal' >>$logfile
}
command_log_end() {
  echo '```' >>$logfile
  echo >>$logfile
}
log_start() {
  echo "# setup log" >$logfile
  echo >>$logfile
  echo "start at \`$(now)\`" >>$logfile
  echo >>$logfile
}
log_end() {
  echo "end at \`$(now)\`" >>$logfile
  echo >>$logfile
  echo "# setup complete" >>$logfile
}
log_section() {
  echo "## $@" >>$logfile
  echo >>$logfile
}
log_detail() {
  echo "### $@" >>$logfile
}
h2() {
  log_section $@
  echo "# $@"
}
h3() {
  log_detail $@
  echo -n " - $@ ... "
}
ok() {
  log_detail ok
  echo "ok"
}
ng() {
  log_detail ng
  echo "ng"
}
fail() {
  log_detail fail
  echo "fail"
  exit 1
}
now() {
  date "+%Y-%m-%d %H:%M:%S"
}
retry() {
  max_tries="$1"; shift
  command="$@"
  attempt_num=1

  until $command
  do
    if ((attempt_num==max_tries)); then
      return 1
    else
      sleep $attempt_num
      ((attempt_num++))
    fi
  done
}